S: !Statement+

Block: %"\n"? %Tab* %"{" %"\n"? !Statement* %"}" %"\n"?

Statement: %Tab* Return | Loop | Cond | Expression | Comment | %"\n" %Delimiter?

# Statements
Comment: %"#" %Character*
Loop: %"for" | %"while" !TestBlock
Cond: %"if" !TestBlock Else?
Else: %"else" Block
Expression: Assign | !Value
Return: %"return " Value

# Conditional
TestBlock: %" "? Test %" "? Block %"\n"?
Test: Operand %" "* TestOp %" "* Operand
TestOp: "isnt" | "is"

# Expressions
Assign: Var %" "* %"=" %" "* !Value
Value: Inc | Operation | Call | Literal | Deref | IdxDeref | Var | Func

#Operation
Operand: Var | Call | Literal | Deref | IdxDeref
Operation: !Operand %" "+ Operator %" "+ !Operation | !Operand
Operator: "+" | "-" | "*" | "/"

# Values
Inc: Var %"++"
Literal: String | Number
Call: Var !ParensCall | !SpaceCall | !BangCall
Deref: StarDeref | IdxDeref
StarDeref: %"*" Var
IdxDeref: Var %"[" Value %"]"
Func: FuncArgsDecl? %"->" %" "? %"\n"? Block %"\n"?
Var: %Letter %Alphanum*

#! Call
ParensCall: %"(" Args %")"
SpaceCall: %" " Args
BangCall: %"!"
Args: !ValueArg*
FuncArgsDecl: %"(" !VarArg+ %")" %" "?
ValueArg: !Value %","? %" "?
VarArg: Var %","? %" "?

# Special
String: %"'" %Character* %"'"
Tab: "  "
Delimiter: "\n" | ";"
